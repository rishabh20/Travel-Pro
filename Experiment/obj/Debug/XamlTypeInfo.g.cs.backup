//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace Experiment
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::Experiment.Experiment_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::Experiment.Experiment_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::Experiment.Experiment_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace Experiment.Experiment_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::Experiment.Experiment_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::Experiment.Experiment_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[41];
            _typeNameTable[0] = "Experiment.ViewModel.ViewModelLocator";
            _typeNameTable[1] = "Object";
            _typeNameTable[2] = "Experiment.ViewModel.MainViewModel";
            _typeNameTable[3] = "GalaSoft.MvvmLight.ViewModelBase";
            _typeNameTable[4] = "GalaSoft.MvvmLight.ObservableObject";
            _typeNameTable[5] = "Experiment.A1";
            _typeNameTable[6] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[7] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[8] = "Experiment.Common.NavigationHelper";
            _typeNameTable[9] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[10] = "Experiment.Common.ObservableDictionary";
            _typeNameTable[11] = "String";
            _typeNameTable[12] = "Experiment.A2";
            _typeNameTable[13] = "Experiment.A3";
            _typeNameTable[14] = "Experiment.A7";
            _typeNameTable[15] = "Experiment.A5";
            _typeNameTable[16] = "Experiment.A6";
            _typeNameTable[17] = "Experiment.A71";
            _typeNameTable[18] = "Experiment.A72";
            _typeNameTable[19] = "Experiment.A73";
            _typeNameTable[20] = "Experiment.A74";
            _typeNameTable[21] = "Experiment.B1";
            _typeNameTable[22] = "Experiment.B2";
            _typeNameTable[23] = "Experiment.B3";
            _typeNameTable[24] = "Experiment.B4";
            _typeNameTable[25] = "Experiment.B5";
            _typeNameTable[26] = "Experiment.B6";
            _typeNameTable[27] = "Experiment.B61";
            _typeNameTable[28] = "Experiment.B7";
            _typeNameTable[29] = "Experiment.Compass";
            _typeNameTable[30] = "Experiment.CountryInfo";
            _typeNameTable[31] = "Experiment.First";
            _typeNameTable[32] = "Experiment.MainPage";
            _typeNameTable[33] = "Experiment.Maps";
            _typeNameTable[34] = "Experiment.Notes";
            _typeNameTable[35] = "Experiment.Page1";
            _typeNameTable[36] = "Experiment.Second";
            _typeNameTable[37] = "Windows.UI.Text.FontWeight";
            _typeNameTable[38] = "System.ValueType";
            _typeNameTable[39] = "Experiment.Translator";
            _typeNameTable[40] = "Experiment.Weather";

            _typeTable = new global::System.Type[41];
            _typeTable[0] = typeof(global::Experiment.ViewModel.ViewModelLocator);
            _typeTable[1] = typeof(global::System.Object);
            _typeTable[2] = typeof(global::Experiment.ViewModel.MainViewModel);
            _typeTable[3] = typeof(global::GalaSoft.MvvmLight.ViewModelBase);
            _typeTable[4] = typeof(global::GalaSoft.MvvmLight.ObservableObject);
            _typeTable[5] = typeof(global::Experiment.A1);
            _typeTable[6] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[7] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[8] = typeof(global::Experiment.Common.NavigationHelper);
            _typeTable[9] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[10] = typeof(global::Experiment.Common.ObservableDictionary);
            _typeTable[11] = typeof(global::System.String);
            _typeTable[12] = typeof(global::Experiment.A2);
            _typeTable[13] = typeof(global::Experiment.A3);
            _typeTable[14] = typeof(global::Experiment.A7);
            _typeTable[15] = typeof(global::Experiment.A5);
            _typeTable[16] = typeof(global::Experiment.A6);
            _typeTable[17] = typeof(global::Experiment.A71);
            _typeTable[18] = typeof(global::Experiment.A72);
            _typeTable[19] = typeof(global::Experiment.A73);
            _typeTable[20] = typeof(global::Experiment.A74);
            _typeTable[21] = typeof(global::Experiment.B1);
            _typeTable[22] = typeof(global::Experiment.B2);
            _typeTable[23] = typeof(global::Experiment.B3);
            _typeTable[24] = typeof(global::Experiment.B4);
            _typeTable[25] = typeof(global::Experiment.B5);
            _typeTable[26] = typeof(global::Experiment.B6);
            _typeTable[27] = typeof(global::Experiment.B61);
            _typeTable[28] = typeof(global::Experiment.B7);
            _typeTable[29] = typeof(global::Experiment.Compass);
            _typeTable[30] = typeof(global::Experiment.CountryInfo);
            _typeTable[31] = typeof(global::Experiment.First);
            _typeTable[32] = typeof(global::Experiment.MainPage);
            _typeTable[33] = typeof(global::Experiment.Maps);
            _typeTable[34] = typeof(global::Experiment.Notes);
            _typeTable[35] = typeof(global::Experiment.Page1);
            _typeTable[36] = typeof(global::Experiment.Second);
            _typeTable[37] = typeof(global::Windows.UI.Text.FontWeight);
            _typeTable[38] = typeof(global::System.ValueType);
            _typeTable[39] = typeof(global::Experiment.Translator);
            _typeTable[40] = typeof(global::Experiment.Weather);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_ViewModelLocator() { return new global::Experiment.ViewModel.ViewModelLocator(); }
        private object Activate_2_MainViewModel() { return new global::Experiment.ViewModel.MainViewModel(); }
        private object Activate_4_ObservableObject() { return new global::GalaSoft.MvvmLight.ObservableObject(); }
        private object Activate_5_A1() { return new global::Experiment.A1(); }
        private object Activate_10_ObservableDictionary() { return new global::Experiment.Common.ObservableDictionary(); }
        private object Activate_12_A2() { return new global::Experiment.A2(); }
        private object Activate_13_A3() { return new global::Experiment.A3(); }
        private object Activate_14_A7() { return new global::Experiment.A7(); }
        private object Activate_15_A5() { return new global::Experiment.A5(); }
        private object Activate_16_A6() { return new global::Experiment.A6(); }
        private object Activate_17_A71() { return new global::Experiment.A71(); }
        private object Activate_18_A72() { return new global::Experiment.A72(); }
        private object Activate_19_A73() { return new global::Experiment.A73(); }
        private object Activate_20_A74() { return new global::Experiment.A74(); }
        private object Activate_21_B1() { return new global::Experiment.B1(); }
        private object Activate_22_B2() { return new global::Experiment.B2(); }
        private object Activate_23_B3() { return new global::Experiment.B3(); }
        private object Activate_24_B4() { return new global::Experiment.B4(); }
        private object Activate_25_B5() { return new global::Experiment.B5(); }
        private object Activate_26_B6() { return new global::Experiment.B6(); }
        private object Activate_27_B61() { return new global::Experiment.B61(); }
        private object Activate_28_B7() { return new global::Experiment.B7(); }
        private object Activate_29_Compass() { return new global::Experiment.Compass(); }
        private object Activate_30_CountryInfo() { return new global::Experiment.CountryInfo(); }
        private object Activate_31_First() { return new global::Experiment.First(); }
        private object Activate_32_MainPage() { return new global::Experiment.MainPage(); }
        private object Activate_33_Maps() { return new global::Experiment.Maps(); }
        private object Activate_34_Notes() { return new global::Experiment.Notes(); }
        private object Activate_35_Page1() { return new global::Experiment.Page1(); }
        private object Activate_36_Second() { return new global::Experiment.Second(); }
        private object Activate_39_Translator() { return new global::Experiment.Translator(); }
        private object Activate_40_Weather() { return new global::Experiment.Weather(); }
        private void MapAdd_10_ObservableDictionary(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::Experiment.Experiment_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Experiment.Experiment_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Experiment.ViewModel.ViewModelLocator
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_0_ViewModelLocator;
                userType.AddMemberName("Main");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Object
                xamlType = new global::Experiment.Experiment_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Experiment.ViewModel.MainViewModel
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 3:   //  GalaSoft.MvvmLight.ViewModelBase
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ObservableObject"));
                xamlType = userType;
                break;

            case 4:   //  GalaSoft.MvvmLight.ObservableObject
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_4_ObservableObject;
                xamlType = userType;
                break;

            case 5:   //  Experiment.A1
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_5_A1;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 6:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::Experiment.Experiment_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::Experiment.Experiment_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  Experiment.Common.NavigationHelper
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 9:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::Experiment.Experiment_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  Experiment.Common.ObservableDictionary
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.DictionaryAdd = MapAdd_10_ObservableDictionary;
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 11:   //  String
                xamlType = new global::Experiment.Experiment_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  Experiment.A2
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_12_A2;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 13:   //  Experiment.A3
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_13_A3;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 14:   //  Experiment.A7
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_14_A7;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 15:   //  Experiment.A5
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_15_A5;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  Experiment.A6
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_16_A6;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 17:   //  Experiment.A71
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_17_A71;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 18:   //  Experiment.A72
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_18_A72;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 19:   //  Experiment.A73
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_19_A73;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  Experiment.A74
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_20_A74;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  Experiment.B1
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_21_B1;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  Experiment.B2
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_22_B2;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 23:   //  Experiment.B3
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_23_B3;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  Experiment.B4
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_24_B4;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  Experiment.B5
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_25_B5;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 26:   //  Experiment.B6
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_26_B6;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 27:   //  Experiment.B61
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_27_B61;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 28:   //  Experiment.B7
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_28_B7;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 29:   //  Experiment.Compass
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_29_Compass;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 30:   //  Experiment.CountryInfo
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_30_CountryInfo;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  Experiment.First
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_31_First;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 32:   //  Experiment.MainPage
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_32_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 33:   //  Experiment.Maps
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_33_Maps;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 34:   //  Experiment.Notes
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_34_Notes;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 35:   //  Experiment.Page1
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_35_Page1;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 36:   //  Experiment.Second
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_36_Second;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 37:   //  Windows.UI.Text.FontWeight
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 38:   //  System.ValueType
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 39:   //  Experiment.Translator
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_39_Translator;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 40:   //  Experiment.Weather
                userType = new global::Experiment.Experiment_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_40_Weather;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::MyToolkit.MyToolkit_Extended_WinRT_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_ViewModelLocator_Main(object instance)
        {
            var that = (global::Experiment.ViewModel.ViewModelLocator)instance;
            return that.Main;
        }
        private object get_1_A1_NavigationHelper(object instance)
        {
            var that = (global::Experiment.A1)instance;
            return that.NavigationHelper;
        }
        private object get_2_A1_DefaultViewModel(object instance)
        {
            var that = (global::Experiment.A1)instance;
            return that.DefaultViewModel;
        }
        private object get_3_A2_NavigationHelper(object instance)
        {
            var that = (global::Experiment.A2)instance;
            return that.NavigationHelper;
        }
        private object get_4_A2_DefaultViewModel(object instance)
        {
            var that = (global::Experiment.A2)instance;
            return that.DefaultViewModel;
        }
        private object get_5_A3_NavigationHelper(object instance)
        {
            var that = (global::Experiment.A3)instance;
            return that.NavigationHelper;
        }
        private object get_6_A3_DefaultViewModel(object instance)
        {
            var that = (global::Experiment.A3)instance;
            return that.DefaultViewModel;
        }
        private object get_7_A7_NavigationHelper(object instance)
        {
            var that = (global::Experiment.A7)instance;
            return that.NavigationHelper;
        }
        private object get_8_A7_DefaultViewModel(object instance)
        {
            var that = (global::Experiment.A7)instance;
            return that.DefaultViewModel;
        }
        private object get_9_A5_NavigationHelper(object instance)
        {
            var that = (global::Experiment.A5)instance;
            return that.NavigationHelper;
        }
        private object get_10_A5_DefaultViewModel(object instance)
        {
            var that = (global::Experiment.A5)instance;
            return that.DefaultViewModel;
        }
        private object get_11_A6_NavigationHelper(object instance)
        {
            var that = (global::Experiment.A6)instance;
            return that.NavigationHelper;
        }
        private object get_12_A6_DefaultViewModel(object instance)
        {
            var that = (global::Experiment.A6)instance;
            return that.DefaultViewModel;
        }
        private object get_13_A71_NavigationHelper(object instance)
        {
            var that = (global::Experiment.A71)instance;
            return that.NavigationHelper;
        }
        private object get_14_A71_DefaultViewModel(object instance)
        {
            var that = (global::Experiment.A71)instance;
            return that.DefaultViewModel;
        }
        private object get_15_A72_NavigationHelper(object instance)
        {
            var that = (global::Experiment.A72)instance;
            return that.NavigationHelper;
        }
        private object get_16_A72_DefaultViewModel(object instance)
        {
            var that = (global::Experiment.A72)instance;
            return that.DefaultViewModel;
        }
        private object get_17_A73_NavigationHelper(object instance)
        {
            var that = (global::Experiment.A73)instance;
            return that.NavigationHelper;
        }
        private object get_18_A73_DefaultViewModel(object instance)
        {
            var that = (global::Experiment.A73)instance;
            return that.DefaultViewModel;
        }
        private object get_19_A74_NavigationHelper(object instance)
        {
            var that = (global::Experiment.A74)instance;
            return that.NavigationHelper;
        }
        private object get_20_A74_DefaultViewModel(object instance)
        {
            var that = (global::Experiment.A74)instance;
            return that.DefaultViewModel;
        }
        private object get_21_B1_NavigationHelper(object instance)
        {
            var that = (global::Experiment.B1)instance;
            return that.NavigationHelper;
        }
        private object get_22_B1_DefaultViewModel(object instance)
        {
            var that = (global::Experiment.B1)instance;
            return that.DefaultViewModel;
        }
        private object get_23_B2_NavigationHelper(object instance)
        {
            var that = (global::Experiment.B2)instance;
            return that.NavigationHelper;
        }
        private object get_24_B2_DefaultViewModel(object instance)
        {
            var that = (global::Experiment.B2)instance;
            return that.DefaultViewModel;
        }
        private object get_25_B3_NavigationHelper(object instance)
        {
            var that = (global::Experiment.B3)instance;
            return that.NavigationHelper;
        }
        private object get_26_B3_DefaultViewModel(object instance)
        {
            var that = (global::Experiment.B3)instance;
            return that.DefaultViewModel;
        }
        private object get_27_B4_NavigationHelper(object instance)
        {
            var that = (global::Experiment.B4)instance;
            return that.NavigationHelper;
        }
        private object get_28_B4_DefaultViewModel(object instance)
        {
            var that = (global::Experiment.B4)instance;
            return that.DefaultViewModel;
        }
        private object get_29_B5_NavigationHelper(object instance)
        {
            var that = (global::Experiment.B5)instance;
            return that.NavigationHelper;
        }
        private object get_30_B5_DefaultViewModel(object instance)
        {
            var that = (global::Experiment.B5)instance;
            return that.DefaultViewModel;
        }
        private object get_31_B6_NavigationHelper(object instance)
        {
            var that = (global::Experiment.B6)instance;
            return that.NavigationHelper;
        }
        private object get_32_B6_DefaultViewModel(object instance)
        {
            var that = (global::Experiment.B6)instance;
            return that.DefaultViewModel;
        }
        private object get_33_B61_NavigationHelper(object instance)
        {
            var that = (global::Experiment.B61)instance;
            return that.NavigationHelper;
        }
        private object get_34_B61_DefaultViewModel(object instance)
        {
            var that = (global::Experiment.B61)instance;
            return that.DefaultViewModel;
        }
        private object get_35_B7_NavigationHelper(object instance)
        {
            var that = (global::Experiment.B7)instance;
            return that.NavigationHelper;
        }
        private object get_36_B7_DefaultViewModel(object instance)
        {
            var that = (global::Experiment.B7)instance;
            return that.DefaultViewModel;
        }
        private object get_37_Compass_NavigationHelper(object instance)
        {
            var that = (global::Experiment.Compass)instance;
            return that.NavigationHelper;
        }
        private object get_38_Compass_DefaultViewModel(object instance)
        {
            var that = (global::Experiment.Compass)instance;
            return that.DefaultViewModel;
        }
        private object get_39_CountryInfo_NavigationHelper(object instance)
        {
            var that = (global::Experiment.CountryInfo)instance;
            return that.NavigationHelper;
        }
        private object get_40_CountryInfo_DefaultViewModel(object instance)
        {
            var that = (global::Experiment.CountryInfo)instance;
            return that.DefaultViewModel;
        }
        private object get_41_First_NavigationHelper(object instance)
        {
            var that = (global::Experiment.First)instance;
            return that.NavigationHelper;
        }
        private object get_42_First_DefaultViewModel(object instance)
        {
            var that = (global::Experiment.First)instance;
            return that.DefaultViewModel;
        }
        private object get_43_Maps_NavigationHelper(object instance)
        {
            var that = (global::Experiment.Maps)instance;
            return that.NavigationHelper;
        }
        private object get_44_Maps_DefaultViewModel(object instance)
        {
            var that = (global::Experiment.Maps)instance;
            return that.DefaultViewModel;
        }
        private object get_45_Notes_NavigationHelper(object instance)
        {
            var that = (global::Experiment.Notes)instance;
            return that.NavigationHelper;
        }
        private object get_46_Notes_DefaultViewModel(object instance)
        {
            var that = (global::Experiment.Notes)instance;
            return that.DefaultViewModel;
        }
        private object get_47_Page1_NavigationHelper(object instance)
        {
            var that = (global::Experiment.Page1)instance;
            return that.NavigationHelper;
        }
        private object get_48_Page1_DefaultViewModel(object instance)
        {
            var that = (global::Experiment.Page1)instance;
            return that.DefaultViewModel;
        }
        private object get_49_Second_NavigationHelper(object instance)
        {
            var that = (global::Experiment.Second)instance;
            return that.NavigationHelper;
        }
        private object get_50_Second_DefaultViewModel(object instance)
        {
            var that = (global::Experiment.Second)instance;
            return that.DefaultViewModel;
        }
        private object get_51_Translator_NavigationHelper(object instance)
        {
            var that = (global::Experiment.Translator)instance;
            return that.NavigationHelper;
        }
        private object get_52_Translator_DefaultViewModel(object instance)
        {
            var that = (global::Experiment.Translator)instance;
            return that.DefaultViewModel;
        }
        private object get_53_Weather_NavigationHelper(object instance)
        {
            var that = (global::Experiment.Weather)instance;
            return that.NavigationHelper;
        }
        private object get_54_Weather_DefaultViewModel(object instance)
        {
            var that = (global::Experiment.Weather)instance;
            return that.DefaultViewModel;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Experiment.Experiment_XamlTypeInfo.XamlMember xamlMember = null;
            global::Experiment.Experiment_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Experiment.ViewModel.ViewModelLocator.Main":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.ViewModel.ViewModelLocator");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "Main", "Experiment.ViewModel.MainViewModel");
                xamlMember.Getter = get_0_ViewModelLocator_Main;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.A1.NavigationHelper":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.A1");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Experiment.Common.NavigationHelper");
                xamlMember.Getter = get_1_A1_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.A1.DefaultViewModel":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.A1");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Experiment.Common.ObservableDictionary");
                xamlMember.Getter = get_2_A1_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.A2.NavigationHelper":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.A2");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Experiment.Common.NavigationHelper");
                xamlMember.Getter = get_3_A2_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.A2.DefaultViewModel":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.A2");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Experiment.Common.ObservableDictionary");
                xamlMember.Getter = get_4_A2_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.A3.NavigationHelper":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.A3");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Experiment.Common.NavigationHelper");
                xamlMember.Getter = get_5_A3_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.A3.DefaultViewModel":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.A3");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Experiment.Common.ObservableDictionary");
                xamlMember.Getter = get_6_A3_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.A7.NavigationHelper":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.A7");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Experiment.Common.NavigationHelper");
                xamlMember.Getter = get_7_A7_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.A7.DefaultViewModel":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.A7");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Experiment.Common.ObservableDictionary");
                xamlMember.Getter = get_8_A7_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.A5.NavigationHelper":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.A5");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Experiment.Common.NavigationHelper");
                xamlMember.Getter = get_9_A5_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.A5.DefaultViewModel":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.A5");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Experiment.Common.ObservableDictionary");
                xamlMember.Getter = get_10_A5_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.A6.NavigationHelper":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.A6");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Experiment.Common.NavigationHelper");
                xamlMember.Getter = get_11_A6_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.A6.DefaultViewModel":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.A6");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Experiment.Common.ObservableDictionary");
                xamlMember.Getter = get_12_A6_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.A71.NavigationHelper":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.A71");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Experiment.Common.NavigationHelper");
                xamlMember.Getter = get_13_A71_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.A71.DefaultViewModel":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.A71");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Experiment.Common.ObservableDictionary");
                xamlMember.Getter = get_14_A71_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.A72.NavigationHelper":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.A72");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Experiment.Common.NavigationHelper");
                xamlMember.Getter = get_15_A72_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.A72.DefaultViewModel":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.A72");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Experiment.Common.ObservableDictionary");
                xamlMember.Getter = get_16_A72_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.A73.NavigationHelper":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.A73");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Experiment.Common.NavigationHelper");
                xamlMember.Getter = get_17_A73_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.A73.DefaultViewModel":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.A73");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Experiment.Common.ObservableDictionary");
                xamlMember.Getter = get_18_A73_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.A74.NavigationHelper":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.A74");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Experiment.Common.NavigationHelper");
                xamlMember.Getter = get_19_A74_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.A74.DefaultViewModel":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.A74");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Experiment.Common.ObservableDictionary");
                xamlMember.Getter = get_20_A74_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.B1.NavigationHelper":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.B1");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Experiment.Common.NavigationHelper");
                xamlMember.Getter = get_21_B1_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.B1.DefaultViewModel":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.B1");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Experiment.Common.ObservableDictionary");
                xamlMember.Getter = get_22_B1_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.B2.NavigationHelper":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.B2");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Experiment.Common.NavigationHelper");
                xamlMember.Getter = get_23_B2_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.B2.DefaultViewModel":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.B2");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Experiment.Common.ObservableDictionary");
                xamlMember.Getter = get_24_B2_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.B3.NavigationHelper":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.B3");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Experiment.Common.NavigationHelper");
                xamlMember.Getter = get_25_B3_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.B3.DefaultViewModel":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.B3");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Experiment.Common.ObservableDictionary");
                xamlMember.Getter = get_26_B3_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.B4.NavigationHelper":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.B4");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Experiment.Common.NavigationHelper");
                xamlMember.Getter = get_27_B4_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.B4.DefaultViewModel":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.B4");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Experiment.Common.ObservableDictionary");
                xamlMember.Getter = get_28_B4_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.B5.NavigationHelper":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.B5");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Experiment.Common.NavigationHelper");
                xamlMember.Getter = get_29_B5_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.B5.DefaultViewModel":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.B5");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Experiment.Common.ObservableDictionary");
                xamlMember.Getter = get_30_B5_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.B6.NavigationHelper":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.B6");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Experiment.Common.NavigationHelper");
                xamlMember.Getter = get_31_B6_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.B6.DefaultViewModel":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.B6");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Experiment.Common.ObservableDictionary");
                xamlMember.Getter = get_32_B6_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.B61.NavigationHelper":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.B61");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Experiment.Common.NavigationHelper");
                xamlMember.Getter = get_33_B61_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.B61.DefaultViewModel":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.B61");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Experiment.Common.ObservableDictionary");
                xamlMember.Getter = get_34_B61_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.B7.NavigationHelper":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.B7");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Experiment.Common.NavigationHelper");
                xamlMember.Getter = get_35_B7_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.B7.DefaultViewModel":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.B7");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Experiment.Common.ObservableDictionary");
                xamlMember.Getter = get_36_B7_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.Compass.NavigationHelper":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.Compass");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Experiment.Common.NavigationHelper");
                xamlMember.Getter = get_37_Compass_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.Compass.DefaultViewModel":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.Compass");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Experiment.Common.ObservableDictionary");
                xamlMember.Getter = get_38_Compass_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.CountryInfo.NavigationHelper":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.CountryInfo");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Experiment.Common.NavigationHelper");
                xamlMember.Getter = get_39_CountryInfo_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.CountryInfo.DefaultViewModel":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.CountryInfo");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Experiment.Common.ObservableDictionary");
                xamlMember.Getter = get_40_CountryInfo_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.First.NavigationHelper":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.First");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Experiment.Common.NavigationHelper");
                xamlMember.Getter = get_41_First_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.First.DefaultViewModel":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.First");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Experiment.Common.ObservableDictionary");
                xamlMember.Getter = get_42_First_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.Maps.NavigationHelper":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.Maps");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Experiment.Common.NavigationHelper");
                xamlMember.Getter = get_43_Maps_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.Maps.DefaultViewModel":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.Maps");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Experiment.Common.ObservableDictionary");
                xamlMember.Getter = get_44_Maps_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.Notes.NavigationHelper":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.Notes");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Experiment.Common.NavigationHelper");
                xamlMember.Getter = get_45_Notes_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.Notes.DefaultViewModel":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.Notes");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Experiment.Common.ObservableDictionary");
                xamlMember.Getter = get_46_Notes_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.Page1.NavigationHelper":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.Page1");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Experiment.Common.NavigationHelper");
                xamlMember.Getter = get_47_Page1_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.Page1.DefaultViewModel":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.Page1");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Experiment.Common.ObservableDictionary");
                xamlMember.Getter = get_48_Page1_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.Second.NavigationHelper":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.Second");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Experiment.Common.NavigationHelper");
                xamlMember.Getter = get_49_Second_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.Second.DefaultViewModel":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.Second");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Experiment.Common.ObservableDictionary");
                xamlMember.Getter = get_50_Second_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.Translator.NavigationHelper":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.Translator");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Experiment.Common.NavigationHelper");
                xamlMember.Getter = get_51_Translator_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.Translator.DefaultViewModel":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.Translator");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Experiment.Common.ObservableDictionary");
                xamlMember.Getter = get_52_Translator_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.Weather.NavigationHelper":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.Weather");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Experiment.Common.NavigationHelper");
                xamlMember.Getter = get_53_Weather_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Experiment.Weather.DefaultViewModel":
                userType = (global::Experiment.Experiment_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Experiment.Weather");
                xamlMember = new global::Experiment.Experiment_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Experiment.Common.ObservableDictionary");
                xamlMember.Getter = get_54_Weather_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::Experiment.Experiment_XamlTypeInfo.XamlSystemBaseType
    {
        global::Experiment.Experiment_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Experiment.Experiment_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::Experiment.Experiment_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Experiment.Experiment_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


